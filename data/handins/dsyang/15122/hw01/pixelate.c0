
typedef int pixel;


int average( int value, int elem_count)
//@ requires 0 <= value && 0 <= elem_count;
//@ ensures \result <= 0xFF; 
{
  return value / elem_count;
}

pixel[] pixelate( pixel[] IN, int width, int height, int blocksize)
//@ requires \length(IN) >= width*height;
//@ requires blocksize > 0;
//@ ensures \length(\result) == width*height;
{
  int i;
  int j;
  int block_counter = 0;
  pixel[] OUT = alloc_array(pixel, width*height);

  for(j = 0; j < height; j = j+blocksize)
  //@ loop_invariant 0 <= j;
  {
    int reds;
    int red_avg = 0;
    int greens;
    int green_avg = 0;
    int blues;
    int blue_avg = 0;
    int pixel_count = 0;
    for(i = 0; i < width; i = i + blocksize)
    //@ loop_invariant 0 <= i;
    {
      int bh = 0;
      int bw = 0;
      int out_color = 0;
      reds = 0;
      greens = 0;
      blues = 0;
      pixel_count = 0;
      //collect all red, green, blue variables
      for(bh = 0; bh < blocksize; bh++)
      //@ loop_invariant 0 <= bh && bh <= blocksize;
      {
        for(bw = 0; bw < blocksize; bw++)
        //@ loop_invariant 0<= bw && bw <= blocksize;
        {	  
	  int index = (width*(j+bh)) + (i+bw);

	  if( (i+bw) < width && (j+bh) < height)
	  {
	    reds += (IN[index] & 0x00FF0000) >> 16;
	    greens += (IN[index] & 0x0000FF00) >> 8;
	    blues += IN[index] & 0x000000FF;
	    pixel_count++;
	  }
	}
      }

      red_avg = average(reds,pixel_count);
      green_avg = average(greens,pixel_count);
      blue_avg = average(blues,pixel_count);
      out_color = 0xFF000000 | (red_avg << 16) | (green_avg << 8) | (blue_avg);
      
      //output the average color
      for(bh = 0; bh < blocksize; bh++)
      //@ loop_invariant 0 <= bh && bh <= blocksize;
      {
        for(bw = 0; bw < blocksize; bw++)
        //@ loop_invariant 0<= bw && bw <= blocksize;
        {	  
	  int index = (width*(j+bh)) + (i+bw);

	  if( (i+bw) < width && (j+bh) < height)
	  {
	    OUT[index] =  out_color;
	  }
	}
      }

    }
  }

  return OUT;
}