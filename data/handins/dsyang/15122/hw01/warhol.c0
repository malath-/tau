
typedef int pixel;

pixel[] warhol(pixel[] IN, int width, int height)
//@ requires \length(IN) >= width*height;
//@ ensures \length(\result) == 4*width*height;
{
  int a; //type of image
  int i; 
  int j;
  pixel[] OUT = alloc_array(pixel, 4*width*height);
      
  for(j = 0; j < height; j++)
  //@ loop_invariant 0 <= j && j <= height;
  {
    //Red Only
    for(i = 0; i < width; i++)
    //@ loop_invariant 0 <= i && i <= width;
    {
      OUT[j*2*width+i] = IN[j*width+i] & 0x00FF0000;
    }
    //Green Only
    for(i = width; i < width*2; i++)
    //@ loop_invariant width <= i && i <= width*2;
    {
      OUT[j*2*width+i] = IN[j*width+(i-width)] & 0x0000FF00;
    }
  }

  for(j = height; j < height*2; j++)
  //@ loop_invariant height <= j && j <= height*2; 
  {
    //Blue Only
    for( i = 0; i < width; i++)
    //@ loop_invariant 0 <= i && i <= width;
    {
      OUT[(j)*2*width + i] = IN[(j-height)*width + i] & 0x000000FF;
    }
    //Grayscale
    for( i = width; i < width*2; i++)
    //@ loop_invariant width <= i && i <= width*2;
    {
      int index = (j-height)*width + (i-width);
      int red = IN[index] & 0x00FF0000 >> 16;
      int green = IN[index] & 0x0000FF00 >> 8;
      int blue = IN[index] & 0x000000FF;
      int grey = (red + blue + green) / 3;
      int greyscale = (IN[index] & 0xFF000000) | (grey << 16) | (grey << 8) | grey;
      OUT[j*2*width + i] = greyscale;
    }
  }
  return OUT;
}
